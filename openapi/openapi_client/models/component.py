# coding: utf-8

"""
    Python API wrapper for Jellyfish Media Server

    The version of the OpenAPI document: 0.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.component_metadata import ComponentMetadata

class Component(BaseModel):
    """
    Describes component
    """
    id: StrictStr = Field(..., description="Assigned component id")
    metadata: ComponentMetadata = Field(...)
    type: StrictStr = Field(..., description="Component type")
    __properties = ["id", "metadata", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Component:
        """Create an instance of Component from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Component:
        """Create an instance of Component from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Component.parse_obj(obj)

        _obj = Component.parse_obj({
            "id": obj.get("id"),
            "metadata": ComponentMetadata.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "type": obj.get("type")
        })
        return _obj



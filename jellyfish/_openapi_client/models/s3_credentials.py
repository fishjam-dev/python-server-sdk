# coding: utf-8

"""
    Python API wrapper for Jellyfish Media Server

    The version of the OpenAPI document: 0.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, Field, StrictStr


class S3Credentials(BaseModel):
    """
    An AWS S3 credential that will be used to send HLS stream. The stream will only be uploaded if credentials are provided
    """

    access_key_id: StrictStr = Field(
        ...,
        alias="accessKeyId",
        description="An AWS access key identifier, linked to your AWS account.",
    )
    bucket: StrictStr = Field(
        ..., description="The name of the S3 bucket where your data will be stored."
    )
    region: StrictStr = Field(
        ..., description="The AWS region where your bucket is located."
    )
    secret_access_key: StrictStr = Field(
        ...,
        alias="secretAccessKey",
        description="The secret key that is linked to the Access Key ID.",
    )
    __properties = ["accessKeyId", "bucket", "region", "secretAccessKey"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> S3Credentials:
        """Create an instance of S3Credentials from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> S3Credentials:
        """Create an instance of S3Credentials from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return S3Credentials.parse_obj(obj)

        _obj = S3Credentials.parse_obj(
            {
                "access_key_id": obj.get("accessKeyId"),
                "bucket": obj.get("bucket"),
                "region": obj.get("region"),
                "secret_access_key": obj.get("secretAccessKey"),
            }
        )
        return _obj

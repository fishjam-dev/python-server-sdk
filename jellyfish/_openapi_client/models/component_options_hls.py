# coding: utf-8

"""
    Python API wrapper for Jellyfish Media Server

    The version of the OpenAPI document: 0.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator
from jellyfish._openapi_client.models.component_options_hlss3 import (
    ComponentOptionsHLSS3,
)


class ComponentOptionsHLS(BaseModel):
    """
    Options specific to the HLS component
    """

    low_latency: Optional[StrictBool] = Field(
        False, alias="lowLatency", description="Whether the component should use LL-HLS"
    )
    persistent: Optional[StrictBool] = Field(
        False, description="Whether the video is stored after end of stream"
    )
    s3: Optional[ComponentOptionsHLSS3] = None
    subscribe_mode: Optional[StrictStr] = Field(
        "auto",
        alias="subscribeMode",
        description="Whether the HLS component should subscribe to tracks automatically or manually.",
    )
    target_window_duration: Optional[StrictInt] = Field(
        None,
        alias="targetWindowDuration",
        description="Duration of stream available for viewer",
    )
    __properties = [
        "lowLatency",
        "persistent",
        "s3",
        "subscribeMode",
        "targetWindowDuration",
    ]

    @validator("subscribe_mode")
    def subscribe_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("auto", "manual"):
            raise ValueError("must be one of enum values ('auto', 'manual')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ComponentOptionsHLS:
        """Create an instance of ComponentOptionsHLS from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of s3
        if self.s3:
            _dict["s3"] = self.s3.to_dict()
        # set to None if s3 (nullable) is None
        # and __fields_set__ contains the field
        if self.s3 is None and "s3" in self.__fields_set__:
            _dict["s3"] = None

        # set to None if target_window_duration (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.target_window_duration is None
            and "target_window_duration" in self.__fields_set__
        ):
            _dict["targetWindowDuration"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ComponentOptionsHLS:
        """Create an instance of ComponentOptionsHLS from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ComponentOptionsHLS.parse_obj(obj)

        _obj = ComponentOptionsHLS.parse_obj(
            {
                "low_latency": obj.get("lowLatency")
                if obj.get("lowLatency") is not None
                else False,
                "persistent": obj.get("persistent")
                if obj.get("persistent") is not None
                else False,
                "s3": ComponentOptionsHLSS3.from_dict(obj.get("s3"))
                if obj.get("s3") is not None
                else None,
                "subscribe_mode": obj.get("subscribeMode")
                if obj.get("subscribeMode") is not None
                else "auto",
                "target_window_duration": obj.get("targetWindowDuration"),
            }
        )
        return _obj

# coding: utf-8

"""
    Python API wrapper for Jellyfish Media Server

    The version of the OpenAPI document: 0.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt

class ComponentMetadataHLS(BaseModel):
    """
    Metadata specific to the HLS component
    """
    low_latency: StrictBool = Field(..., alias="lowLatency", description="Whether the component uses LL-HLS")
    persistent: StrictBool = Field(..., description="Whether the video is stored after end of stream")
    playable: StrictBool = Field(..., description="Whether the generated HLS playlist is playable")
    target_window_duration: Optional[StrictInt] = Field(..., alias="targetWindowDuration", description="Duration of stream available for viewer")
    __properties = ["lowLatency", "persistent", "playable", "targetWindowDuration"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ComponentMetadataHLS:
        """Create an instance of ComponentMetadataHLS from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if target_window_duration (nullable) is None
        # and __fields_set__ contains the field
        if self.target_window_duration is None and "target_window_duration" in self.__fields_set__:
            _dict['targetWindowDuration'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ComponentMetadataHLS:
        """Create an instance of ComponentMetadataHLS from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ComponentMetadataHLS.parse_obj(obj)

        _obj = ComponentMetadataHLS.parse_obj({
            "low_latency": obj.get("lowLatency"),
            "persistent": obj.get("persistent"),
            "playable": obj.get("playable"),
            "target_window_duration": obj.get("targetWindowDuration")
        })
        return _obj



# coding: utf-8

"""
    Python API wrapper for Jellyfish Media Server

    The version of the OpenAPI document: 0.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint, validator

class RoomConfig(BaseModel):
    """
    Room configuration
    """
    max_peers: Optional[conint(strict=True, ge=1)] = Field(None, alias="maxPeers", description="Maximum amount of peers allowed into the room")
    video_codec: Optional[StrictStr] = Field(None, alias="videoCodec", description="Enforces video codec for each peer in the room")
    __properties = ["maxPeers", "videoCodec"]

    @validator('video_codec')
    def video_codec_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('h264', 'vp8'):
            raise ValueError("must be one of enum values ('h264', 'vp8')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RoomConfig:
        """Create an instance of RoomConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if max_peers (nullable) is None
        # and __fields_set__ contains the field
        if self.max_peers is None and "max_peers" in self.__fields_set__:
            _dict['maxPeers'] = None

        # set to None if video_codec (nullable) is None
        # and __fields_set__ contains the field
        if self.video_codec is None and "video_codec" in self.__fields_set__:
            _dict['videoCodec'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RoomConfig:
        """Create an instance of RoomConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RoomConfig.parse_obj(obj)

        _obj = RoomConfig.parse_obj({
            "max_peers": obj.get("maxPeers"),
            "video_codec": obj.get("videoCodec")
        })
        return _obj


